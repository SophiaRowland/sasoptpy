
.. currentmodule:: sasoptpy

.. _web-api:

RESTful API
***********

*sasoptpy* provides an experimental RESTful API as of v0.2.1.
This API is intended to be used to connect development on other languages through a common interface.

.. csv-table:: List of RESTful API requests
   :file: web-api.csv
   :widths: 3, 2, 9, 2, 11
   :header-rows: 1
   :class: longtable

Setup
+++++

You need to start *sasoptpy*'s web server using

.. code-block:: python

   from sasoptpy.api import api
   api.start()

You can also start the web server in a separate thread using `thread=True` parameter.

Status of the server can be checked using a request to the `localhost` address.

Overview
++++++++

A `GET` request to the server root returns the package name and current version of the package.

.. http:get:: /

   Get the server status

   :status 200: Server is available
   
   **Example request**:
   
   .. sourcecode:: http

      GET / HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 49
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "package": "sasoptpy",
        "version": "0.2.1"
      }

You can perform actions on the server using a `POST` request to the root domain.
In order to separate each user's work, an authentication token is required to identify the workspace you are working at.
The action you are requesting can only be performed at the workspace level.

.. http:post:: /

   Performs the requested action in a specific workspace

   :reqheader Authorization: Bearer token to authenticate
   :reqheader Content-Type: `application/json`
   :json string action: Action verb (``clean``)
   :statuscode 200: Action is performed succesfully
   :statuscode 422: Authentication is failed
   
   **Example request**:
   
   .. sourcecode:: http

      POST / HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 12
      Content-Type: application/x-www-form-urlencoded

      action=clean

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 74
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "message": "Cleaned the workspace contents",
        "workspace": "myworkspace"
      }

You can create a workspace to separate namespace when working on multiple projects at the same time.
Each workspace requires a name and a password at initialization.
It generates an OAuth2 token to authenticate your upcoming requests.
You can see a list of workspaces as follows:

.. http:get:: /workspaces

   Get a list of workspaces

   :statuscode 200: Action is performed succesfully
   
   **Example request**:
   
   .. sourcecode:: http

      GET /workspaces HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 32
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "workspaces": [
          "myworkspace"
        ]
      }

A new workspace can be created with a `POST` request as follows.
Note that, the ``auth`` token generated by this request is required for almost all requests you make.
This token works as an identifier of the workspace as well, so you do not need to pass the workspace name every time.

.. http:post:: /workspaces

   Creates a new workspace and returns auth token

   :json string name: Workspace name
   :json string password: Password for token generation and regeneration
   :statuscode 201: A new workspace is created successfully
   :statuscode 422: A workspace with the same name exists
   
   **Example request**:
   
   .. sourcecode:: http

      POST /workspaces HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Content-Length: 31
      Content-Type: application/x-www-form-urlencoded

      name=myworkspace&password=12345

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 172
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "token": "eyJhbGciOiJIUzI1NiIsImlhdCI6MTU0NjUzODY3OSwiZXhwIjoxNTQ2NTM5Mjc5fQ.eyJuYW1lIjoibXl3b3Jrc3BhY2UifQ.6eNPrOTeK0Nbd42Ch3rPXoYQ558Vj8qL0crTQz8K1_Y",
        "duration": 600
      }

You can check status of an existing workspace using a `GET` request.
This request can also be used to verify that token is valid.

.. http:get:: /workspaces/(str:workspace)

   Checks if workspace is reachable

   :reqheader Authorization: Bearer token to authenticate
   :query workspace: Name of the workspace
   :statuscode 200: Token is valid for the workspace
   :statuscode 422: Token is not valid for the workspace
   
   **Example request**:
   
   .. sourcecode:: http

      GET /workspaces/myworkspace HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 47
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "status": "Token is valid for the workspace"
      }

Every token is only valid for a limited time period (currently 10 minutes).
You can renew the auth token by sending a `POST` request to target workspace with original password attached.

.. http:post:: /workspaces/(str:workspace)

   Renews an auth token using initial password

   :query workspace: Name of the workspace
   :form password: Password of the workspace
   :statuscode 201: A new auth token is generated
   :statuscode 401: The password does not match the original password
   
   **Example request**:
   
   .. sourcecode:: http

      POST /workspaces/myworkspace HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Content-Length: 14
      Content-Type: application/x-www-form-urlencoded

      password=12345

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 172
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "token": "eyJhbGciOiJIUzI1NiIsImlhdCI6MTU0NjU0MDQ4MCwiZXhwIjoxNTQ2NTQxMDgwfQ.eyJuYW1lIjoibXl3b3Jrc3BhY2UifQ.cEwUsq6ISz6_T9mAjRJumtJZM5jlOzcOPivRczu1KRE",
        "duration": 600
      }

A CAS session is required to solve optimization models.
You can see a list of CAS sessions in the workspace as follows:

.. http:get:: /sessions

   Returns a list of CAS sessions

   :reqheader Authorization: Bearer token to authenticate
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      GET /sessions HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 24
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "sessions": [
          "mycas"
        ]
      }

You can create a CAS session using a `POST` request.
An ``authinfo`` file on the Python server might be needed to make this connection.

.. http:post:: /sessions

   Creates a new CAS session

   :reqheader Authorization: Bearer token to authenticate
   :json name: CAS session name
   :json host: Hostname of the CAS server
   :json port: Port number used for CAS connections
   :json auth: Absolute path of authinfo file on the Python server
   :statuscode 201: Created new CAS session
   :statuscode 400: Cannot create CAS session, see message for more details
   
   **Example request**:
   
   .. sourcecode:: http

      POST /sessions HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 70
      Content-Type: application/x-www-form-urlencoded

      name=mycas&host=HOST&port=PORT&auth=U%3A%5C.authinfo

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 64
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "id": "8d1767d2-48c8-a048-98c2-3046bb978e6b",
        "name": "mycas"
      }

Models
++++++

After creating a workspace and a session, you can create multiple models.
Models in the same workspace share the same namespace, hence you can use the same model components inside different models.

You can get a list of available models in a workspace using a `GET` request.

.. http:get:: /models

   Returns a list of optimization models

   :reqheader Authorization: Bearer token to authenticate
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      GET /models HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 37
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "models": {
          "knapsack": "knapsack"
        }
      }

A new model can be created using a `POST` request.

.. http:post:: /models

   Creates a new optimization model

   :reqheader Authorization: Bearer token to authenticate
   :form name: Model name
   :form session: An existing session name
   :statuscode 201: Created a new optimization model
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      POST /models HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 27
      Content-Type: application/x-www-form-urlencoded

      name=knapsack&session=mycas

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 69
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "name": "knapsack",
        "workspace": "myworkspace",
        "session": "mycas"
      }

Information about an individual model can be requested using a `GET` request, where the model name is a parameter.

.. http:get:: /models/(str:model)

   Returns the requested model

   :reqheader Authorization: Bearer token to authenticate
   :query model: Name of the model
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   :statuscode 404: Model name is not in the workspace
   
   **Example request**:
   
   .. sourcecode:: http

      GET /models/knapsack HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 69
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "name": "knapsack",
        "workspace": "myworkspace",
        "session": "mycas"
      }


Variables
+++++++++

Variable objects can be created inside models or standalone.
They later can be used in multiple models, if needed.
Also, API supports adding multi-dimensional variables using variable groups.

A list of variables in the workspace can be seen using a `GET` request.

.. http:get:: /variables

   Returns a list of variables in the workspace

   :reqheader Authorization: Bearer token to authenticate
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      GET /variables HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 34
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "variables": {
          "myvar": "myvar"
        }
      }

A list of variables that belongs to a certain model can be requested as follows:

.. http:get:: /models/(str:model)/variables

   Returns a list of variables inside the model

   :reqheader Authorization: Bearer token to authenticate
   :query model: Name of the model
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   :statuscode 404: Model name is not found
   
   **Example request**:
   
   .. sourcecode:: http

      GET /models/knapsack/variables HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 25
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "variables": [
          "myvar"
        ]
      }

A variable can be created inside a model using a `POST` request.
A variable can be created outside the model scope in *sasoptpy*, but this feature is currently not supported by the RESTful API yet.

.. http:post:: /models/(str:model)/variables

   Creates a new variable inside the model

   :reqheader Authorization: Bearer token to authenticate
   :query model: Name of the model
   :form name: Name of the variable
   :form lb: Lower bound of the variable
   :form ub: Upper bound of the variable
   :form vartype: Type of the variable, `binary` `integer` or `continuous` (default)
   :statuscode 201: Variable is created
   :statuscode 400: Authentication error
   :statuscode 404: Model name is not found
   
   **Example request**:
   
   .. sourcecode:: http

      POST /models/knapsack/variables HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 25
      Content-Type: application/x-www-form-urlencoded

      name=myvar&vartype=binary

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 18
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "name": "myvar"
      }

Variable groups are multi-dimensional variables inside models.
Due to their nature, their construction slightly differs from variables.

A list of variable groups in a workspace can be obtained using a `GET` query.

.. http:get:: /variable_groups

   Returns a list of variable groups

   :reqheader Authorization: Bearer token to authenticate
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      GET /variable_groups HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 37
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "variablegroups": {
          "pick": "pick"
        }
      }

A list of variable groups inside a model can be obtained as follows:

.. http:get:: /models/(str:model)/variable_groups

   Returns a list of variable groups inside the model

   :reqheader Authorization: Bearer token to authenticate
   :query model: Name of the model
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   :statuscode 404: Model name is not found
   
   **Example request**:
   
   .. sourcecode:: http

      GET /models/knapsack/variable_groups HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 29
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "variablegroups": [
          "pick"
        ]
      }


Creating variable groups requires an additional parameter, called `index`.
This parameter should be a JSON array.
Each array element can be one of the following:
- An integer representing the size, e.g. `4`
- A JSON list of strings to be used as index, e.g. `["pen", "watch", "cup"]`
- A symbolic data parameter starts with `$` sign, e.g. `"$NumMachines"`

.. http:post:: /models/(str:model)/variable_groups

   Creates a set of variable groups inside the model

   :reqheader Authorization: Bearer token to authenticate
   :reqheader Content-Length: Length of the JSON object
   :reqheader Content-Type: `application/json`
   :query model: Name of the model
   :json name: Name of the variable group
   :json index: Set of indices of the variable group
   :json lb: Lower bound of variables
   :json ub: Upper bound of variables
   :json vartype: Variable types
   :json init: Initial value of variables
   :statuscode 201: Variable group is created
   :statuscode 400: Authentication error
   :statuscode 404: Model name is not found
   
   **Example request**:
   
   .. sourcecode:: http

      POST /models/knapsack/variable_groups HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 74
      Content-Type: application/json

      {"name": "pick", "index": [["pen", "watch", "cup"]], "vartype": "integer"}

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 57
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "message": "Variable group is created",
        "name": "pick"
      }


Expressions
+++++++++++

Linear and nonlinear expressions can be added to models to be used inside constraints, objectives, and print statements.
Currently, RESTful API only allows adding expressions to be used as objective values.

.. http:get:: /expressions

   Returns a list of expressions in the workspace

   :reqheader Authorization: Bearer token to authenticate
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      GET /expressions HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y


   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 85
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "expressions": {
          "total_value": "5 * pick[pen] + 20 * pick[watch] + 2 * pick[cup]"
        }
      }

Objective of a model can be obtained using a `GET` request:

.. http:get:: /models/(str:model)/objectives

   Returns the objective function of a model

   :reqheader Authorization: Bearer token to authenticate
   :query model: Name of the model
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   :statuscode 404: Model name is not found
   
   **Example request**:
   
   .. sourcecode:: http

      GET /models/knapsack/objectives HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 83
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "objective": {
          "total_value": "5 * pick[pen] + 20 * pick[watch] + 2 * pick[cup]"
        }
      }

An objective can be set using a `POST` request.
Here, `expression` parameter should conform as a regular Python expression.

.. http:post:: /models/(str:model)/objectives

   Sets the objective function of a model

   :reqheader Authorization: Bearer token to authenticate
   :query model: Name of the model
   :form expression: Objective function as a valid Python expression in string form
   :form sense: Sense of the objective, `minimize` or `maximize`
   :form name: Name of the objective function
   :statuscode 201: Objective is set
   :statuscode 400: Authentication error
   :statuscode 404: Model name is not found
   
   **Example request**:
   
   .. sourcecode:: http

      POST /models/knapsack/objectives HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 131
      Content-Type: application/x-www-form-urlencoded

      expression=5*pick["pen"]+20*pick["watch"]+2*pick["cup"]&sense=minimize&name=total_value


   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 90
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "name": "total_value",
        "expression": "5 * pick[pen] + 20 * pick[watch] + 2 * pick[cup]"
      }

Constraints
+++++++++++

Constraint objects are similar to expressions in terms of construction.
A list of constraints in the workspace can be requested as follows:

.. http:get:: /constraints

   Returns a list of constraints

   :reqheader Authorization: Bearer token to authenticate
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      GET /constraints HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y


   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 89
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "constraints": {
          "total_weight": "pick[pen] + 3 * pick[watch] + 10 * pick[cup] <=  22"
        }
      }

Constraints inside a model can be listed using a `GET` query.

.. http:get:: /models/(str:model)/constraints

   Returns a list of constraints inside the model

   :reqheader Authorization: Bearer token to authenticate
   :query model: Name of the model
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   :statuscode 404: Model name is not found
   
   **Example request**:
   
   .. sourcecode:: http

      GET /models/knapsack/constraints HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y


   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 34
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "constraints": [
          "total_weight"
        ]
      }

A single constraint can be created as follows:

.. http:post:: /models/(str:model)/constraints

   Creates a constraint inside the model

   :reqheader Authorization: Bearer token to authenticate
   :query model: Name of the model
   :form name: Name of the constraint
   :form expression: Constraint expression in valid Python format
   :statuscode 201: Constraint is created
   :statuscode 400: Authentication error
   :statuscode 404: Model name is not found
   
   **Example request**:
   
   .. sourcecode:: http

      POST /models/knapsack/constraints HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 115
      Content-Type: application/x-www-form-urlencoded

      expression=1*pick["pen"]+3*pick["watch"]+10*pick["cup"]<=22&name=total_weight

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 115
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "name": "total_weight",
        "model": "knapsack",
        "expression": "pick[pen] + 3 * pick[watch] + 10 * pick[cup] <=  22"
      }

Constraint groups are multi-dimensional constraints.
On top of `expression` and `name` parameters, they also require `index` parameter at initialization.

Constraint groups in the workspace can be requested as follows:

.. http:get:: /constraint_groups

   Returns a list of constraint groups

   :reqheader Authorization: Bearer token to authenticate
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      GET /constraint_groups HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 147
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "constraintgroups": {
          "bounds": {
            "bounds['pen']": "pick[pen] <=  5",
            "bounds['watch']": "pick[watch] <=  5",
            "bounds['cup']": "pick[cup] <=  5"
          }
        }
      }

Constraint groups that appears inside a model can be requested as follows:

.. http:get:: /models/(str:model)/constraint_groups

   Returns a list of constraint groups inside the model

   :reqheader Authorization: Bearer token to authenticate
   :query model: Name of the model
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      GET /models/knapsack/constraint_groups HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y


   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 147
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "constraintgroups": {
          "bounds": {
            "bounds['pen']": "pick[pen] <=  5",
            "bounds['watch']": "pick[watch] <=  5",
            "bounds['cup']": "pick[cup] <=  5"
          }
        }
      }

Constraint group generation is similar to generating variable groups or expressions.

.. http:post:: /models/(str:model)/constraint_groups

   Creates a set of constraint groups inside the model

   :reqheader Authorization: Bearer token to authenticate
   :reqheader Content-Type: `application/json`
   :query model: Name of the model
   :json expression: Expression in valid Python format
   :json index: Index of the constraint group
   :json name: Name of the constraint group
   :statuscode 201: Constraint group is created
   :statuscode 400: Authentication error
   :statuscode 404: Model name is not in the workspace
   
   **Example request**:
   
   .. sourcecode:: http

      POST /models/knapsack/constraint_groups HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 89
      Content-Type: application/json

      {"expression": "pick[i]<=5", "index": "for i in ['pen','watch','cup']", "name": "bounds"}

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 40
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "name": "bounds",
        "model": "knapsack"
      }


Solve
+++++

A model can be submitted to be solved by SAS Optimization solvers as follows:

.. http:post:: /models/(str:model)/solutions

   Solves a model and requests solutions

   :reqheader Authorization: Bearer token to authenticate
   :query model: Name of the model
   :form stream: `True` for real-time output or `False`
   :statuscode 200: Valid request with response
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      POST /models/knapsack/solutions HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 12
      Content-Type: application/x-www-form-urlencoded

      stream=False

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 1888
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "model": "knapsack",
        "objective": 125,
        "solutions": {
          "pick[pen]": 5.0,
          "pick[watch]": 5.0,
          "pick[cup]": 0.0
        },
        "stream": "..."
      }


Data
++++

Data objects can be created on the server-side using valid Python expressions.
This request creates a Python variable with the requested name.

You can test if your request is valid beforehand using:

.. code-block:: python

      e = json.loads(value)


.. http:post:: /data

   Creates a data object in the server

   :reqheader Authorization: Bearer token to authenticate
   :reqheader Content-Type: `application/json`
   :json name: Name of the object
   :json value: Value in valid JSON format
   :statuscode 201: Variable is created
   :statuscode 400: Authentication error
   
   **Example request**:
   
   .. sourcecode:: http

      POST /data HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 22
      Content-Type: application/x-www-form-urlencoded

      name=capacity&value=20

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 47
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "name": "capacity",
        "type": "int",
        "len": ""
      }

   **Example request**:
   
   .. sourcecode:: http

      POST /data HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 45
      Content-Type: application/json

      {"name": "value_data", "value": "[5, 20, 2]"}

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 49
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "name": "value_data",
        "type": "list",
        "len": 3
      }

   **Example request**:
   
   .. sourcecode:: http

      POST /data HTTP/1.1
      Host: localhost:5000
      User-Agent: python-requests/2.19.1
      Accept-Encoding: gzip, deflate
      Accept: */*
      Connection: keep-alive
      Authorization: Bearer eyJhb...K1_Y
      Content-Length: 75
      Content-Type: application/json

      {"name": "weight_data", "value": "{\"pen\": 1, \"watch\": 3, \"cup\": 10}"}

   **Example response**:

   .. sourcecode:: http

      HTTP/1.1 201 CREATED
      Content-Type: application/json
      Content-Length: 50
      Server: Werkzeug/0.14.1 Python/3.6.5

      {
        "name": "weight_data",
        "type": "dict",
        "len": 3
      }
